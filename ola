function Get-PersonNameFromProfile {
    param (
        [string]$profileUrl
    )
    
    
    # Extract the name from the URL
    if ($profileUrl -match "in/([^/]+)/") {
        $personSlug = $matches[1]
        Write-Host "Found person slug: $personSlug"
        
        $nameParts = $personSlug -split "-"
        $folderNameParts = @()
        foreach ($part in $nameParts) {
            if ($part.Length -gt 0) {
                $capitalizedPart = (Get-Culture).TextInfo.ToTitleCase($part)
                $folderNameParts += $capitalizedPart
            }
        }
        
        # Join parts with spaces
        $folderName = $folderNameParts -join " "
        
        Write-Host "Person folder name: $folderName"
        return $folderName
    } else {
        # Default folder name if pattern not found
        $folderName = "Unknown Person"
        Write-Host "Could not extract name from profile URL, using default: $folderName"
        return $folderName
    }
}

# Create the full path
#function Get-LinkedInDataPath {
    param (
        [Parameter(Mandatory=$true)]
        [string]$profileUrl,
        
        [Parameter(Mandatory=$false)]
        [string]$category = "Activity",
        
        [Parameter(Mandatory=$false)]
        [string]$fileName = "LatestPosts.html",
        
        [Parameter(Mandatory=$false)]
        [string]$baseFolder = "_logs",
        
        [Parameter(Mandatory=$false)]
        [DateTime]$date = (Get-Date)
    )
    
    # Extract the actual name from the page
    try {
        # Use the exact XPath you provided, but remove the text() node since Selenium needs the element
        $nameElement = $global:driver.FindElementByXPath('//*[@id="ember3883"]/h3')
        $profileName = $nameElement.Text.Trim()
        $personName = $profileName -replace '[\\/:*?"<>|]', '' 
        Write-Host "Extracted name from page: $personName"
    } catch {
        Write-Host "Failed to extract name from page. Falling back to URL..."
        $personName = Get-PersonNameFromProfile -profileUrl $profileUrl
    }

    # Format the date
    $dateStr = $date.ToString("yyyy-MM-dd_HH-mm")
    
    # Create base directory path
    $basePath = Join-Path (Get-Location) $baseFolder
    if (-not (Test-Path $basePath)) {
        Write-Host "Creating base directory: $baseFolder"
        New-Item -ItemType Directory -Path $basePath -Force | Out-Null
    }
    
    # Create person folder
    $personPath = Join-Path $basePath $personName
    if (-not (Test-Path $personPath)) {
        Write-Host "Creating person folder: $personName"
        New-Item -ItemType Directory -Path $personPath -Force | Out-Null
    }
    
    # Create date folder
    $datePath = Join-Path $personPath $dateStr
    if (-not (Test-Path $datePath)) {
        Write-Host "Creating date folder: $dateStr"
        New-Item -ItemType Directory -Path $datePath -Force | Out-Null
    }
    
    # Create category folder
    $categoryPath = Join-Path $datePath $category
    if (-not (Test-Path $categoryPath)) {
        Write-Host "Creating category folder: $category"
        New-Item -ItemType Directory -Path $categoryPath -Force | Out-Null
    }
    
    # Create the full file path
    $filePath = Join-Path $categoryPath $fileName
    
    return @{
        BasePath = $basePath
        PersonPath = $personPath
        DatePath = $datePath
        CategoryPath = $categoryPath
        FilePath = $filePath
    }
}